'''import math
import numpy as np
import pandas as pd
from sklearn import preprocessing, svm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

#df = quandl.get("WIKI/GOOGL")
#df.to_csv('google.csv')
df = pd.read_csv('google.csv', index_col = 'Date', parse_dates= True)        # these parameters avoid problems with the datetime module

#print(df.head())
#print(df.tail())

df = df[['Adj. Open',  'Adj. High',  'Adj. Low',  'Adj. Close', 'Adj. Volume']] # taking the useful columns from the df


df['HL_PCT'] = (df['Adj. High'] - df['Adj. Low']) / df['Adj. Close'] * 100.0    # reducing some columns to a single col
df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) / df['Adj. Open'] * 100.0 # reducing some columns to a single col


df = df[['Adj. Close', 'HL_PCT', 'PCT_change', 'Adj. Volume']]     # final dataframe with configured columns
#### EDIT - these columns are not very pratical. in the real world, these columns/ features arent what have an effect on the stock prices,
####this was supposed to be a simple example and not a tutorial on stock price prediction

#rint(df.head())

forecast_col = 'Adj. Close'                  # the label/ what we'll predict
df.fillna(value=-99999, inplace=True)         # removing bogus values and filling them with -99999
forecast_out = int(math.ceil(0.01 * len(df))) # length of df is 3424 , multiply with 0.01 gives 34.24 and ceil gives us 35
# hence we have value of 35 in forecast out, which essentially we will use to predict values for 35 days into the future
# you can edit the 0.01 value and tweak it for your own use

#print(df.head())
df['label'] = df[forecast_col].shift(-forecast_out)
#print('------------------------------')
#print(df.head())
df.dropna(inplace=True)
X = np.array(df.drop(['label'], 1))


X = preprocessing.scale(X)
X_lately = X[-forecast_out:] 
X = X[:-forecast_out]

df.dropna(inplace = True)

y = np.array(df['label'])
y = y[:-forecast_out]
#clf = svm.SVR()

X_train, X_test, y_train, y_test = train_test_split(X, y , test_size= 0.2)       #### CROSS VALIDATION HAS BEEN DEPRECATED, TRAIN TEST SPLIT IS NOW TO BE USED

#clf.fit(X_train, y_train)
#confidence = clf.score(X_test, y_test)
#print(confidence)
################################

clf = LinearRegression(n_jobs = -1)
clf.fit(X_train, y_train)
clf.fit(X_train, y_train)


confidence = clf.score(X_test, y_test)

print('-------------')
#print(confidence)

forecast_set = clf.predict(X_lately)

print(forecast_set, confidence, forecast_out)

import datetime
import matplotlib.pyplot as plt
from matplotlib import style
import time

style.use('ggplot')

df['Forecast'] = np.nan

last_date = df.iloc[-1].name
last_unix = time.mktime(last_date.timetuple())
one_day = 86400
next_unix = last_unix + one_day

for i in forecast_set:
    next_date = datetime.datetime.fromtimestamp(next_unix)
    next_unix += 86400
    df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]

df['Adj. Close'].plot()
df['Forecast'].plot()
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()'''

'''from statistics import mean
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style

style.use('ggplot')

xs = np.array([1, 2, 3, 4, 5], dtype=np.float64)  # defing the type was not important right now but this is what we will use in the future
ys = np.array([5, 4, 6, 5, 6], dtype=np.float64)


def best_fit_slope_and_intercept(xs, ys):
    m = (((mean(xs) * mean(ys)) - mean(xs * ys)) /            # formula to calculate the slope given the points IMPORTANT
         ((mean(xs) * mean(xs)) - mean(xs * xs)))
    b = mean(ys) - m * mean(xs)                               # formula to calculate the Y INTERCEPT  - important
    return m, b


def squared_error(ys_orig, ys_line):
    return sum((ys_line - ys_orig) * (ys_line - ys_orig))         # calculating the error , ie, the distance of the point on the line and the actual point on the y axis
                                                                  # it is squared as to remove any negative quantities. we did not take the absolute values as to penalize any outliers. instead of squaring we can cube ( or further) the values to penalize for outliers even further

def coefficient_of_determination(ys_orig, ys_line):
    y_mean_line = [mean(ys_orig) for y in ys_orig]
    squared_error_regr = squared_error(ys_orig, ys_line)
    squared_error_y_mean = squared_error(ys_orig, y_mean_line)
    return 1 - (squared_error_regr / squared_error_y_mean)        # r^2 = this formula, the higher the value of r^2, the better


m, b = best_fit_slope_and_intercept(xs, ys)
regression_line = [(m * x) + b for x in xs]

r_squared = coefficient_of_determination(ys, regression_line)      # passing in the best fit slope and the best fit line.
print(r_squared)

##plt.scatter(xs,ys,color='#003F72',label='data')
##plt.plot(xs, regression_line, label='regression line')
##plt.legend(loc=4)
##plt.show()
'''

