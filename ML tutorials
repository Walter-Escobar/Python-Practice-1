from statistics import mean
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style

style.use('ggplot')

xs = np.array([1, 2, 3, 4, 5], dtype=np.float64)  # defing the type was not important right now but this is what we will use in the future
ys = np.array([5, 4, 6, 5, 6], dtype=np.float64)


def best_fit_slope_and_intercept(xs, ys):
    m = (((mean(xs) * mean(ys)) - mean(xs * ys)) /            # formula to calculate the slope given the points IMPORTANT
         ((mean(xs) * mean(xs)) - mean(xs * xs)))
    b = mean(ys) - m * mean(xs)                               # formula to calculate the Y INTERCEPT  - important
    return m, b


def squared_error(ys_orig, ys_line):
    return sum((ys_line - ys_orig) * (ys_line - ys_orig))         # calculating the error , ie, the distance of the point on the line and the actual point on the y axis
                                                                  # it is squared as to remove any negative quantities. we did not take the absolute values as to penalize any outliers. instead of squaring we can cube ( or further) the values to penalize for outliers even further

def coefficient_of_determination(ys_orig, ys_line):
    y_mean_line = [mean(ys_orig) for y in ys_orig]
    squared_error_regr = squared_error(ys_orig, ys_line)
    squared_error_y_mean = squared_error(ys_orig, y_mean_line)
    return 1 - (squared_error_regr / squared_error_y_mean)        # r^2 = this formula, the higher the value of r^2, the better


m, b = best_fit_slope_and_intercept(xs, ys)
regression_line = [(m * x) + b for x in xs]

r_squared = coefficient_of_determination(ys, regression_line)      # passing in the best fit slope and the best fit line.
print(r_squared)

##plt.scatter(xs,ys,color='#003F72',label='data')
##plt.plot(xs, regression_line, label='regression line')
##plt.legend(loc=4)
##plt.show()
